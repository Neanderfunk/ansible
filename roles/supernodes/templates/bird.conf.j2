#table ffrl;
# öffentliche IPv4 des NAT-Gateways 
router id {{ grePublicIP[ansible_hostname]['ip4'] }};

protocol direct announce {
        table master; # implizit
        import where net ~ [{{ grePublicIP[ansible_hostname]['ip4'] }}/32];
        interface "tun-ffrl-uplink";
};
#        interface "tun-ffrl-*";
#        # ungefiltert holt ihr euch hier potentiell alles komische zeug rein... was ihr dann ffrl announced
#};

#protocol static announce {
# announct explizit diese ip-adressen/subnetze
#       route {{ grePublicIP[ansible_hostname]['ip4'] }}/32 reject;
#}

protocol kernel {
        table master;
        device routes;
        import none; # ihr wollt nichts aus der kernel routing tabelle lernen
        export filter {
                #  setze src addr beim route-export in kernel tabelle
                krt_prefsrc = {{ grePublicIP[ansible_hostname]['ip4'] }};
                accept;
        };
        kernel table 42;
};

protocol device {
        scan time 15;
};

function is_default() {
        return (net ~ [0.0.0.0/0]);
};

#filter hostroute {
#        if net ~ {{ grePublicIP[ansible_hostname]['ip4'] }}/32 then accept;
#        reject;
#};

template bgp uplink {
        local as {{ icVpnAs }}; # AS vom IC-VPN
        import where is_default();
        export where proto = "announce";
#       next hop self;
#       multihop 64;
#       default bgp_local_pref 200;
};

{% for router in greTunnels[ansible_nodename] %}
protocol bgp ffrl_{{ router | regex_replace('[^_a-zA-Z0-9]','_') }} from uplink {
	source address {{ greTunnels[ansible_nodename][router].ip4.local }};
	neighbor {{ greTunnels[ansible_nodename][router].ip4.remote }} as 201701;
{% if router in grePublicIP[ansible_hostname].preference %}
	preference {{ grePublicIP[ansible_hostname].preference[router] }};
{% endif %}
};

{% endfor %}
