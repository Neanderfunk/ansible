-- This is an example site configuration for Gluon v2015.1+
--
-- Take a look at the documentation located at
-- http://gluon.readthedocs.org/ for details.
--
-- This configuration will not work as it. You're required to make
-- community specific changes to it!
{
  -- Used for generated hostnames, e.g. freifunk-abcdef123456. (optional)
  hostname_prefix = '{{ item.value.hostname_prefix }}',

  -- Name of the community.
  site_name = '{{ item.value.site_name }}',

  -- Shorthand of the community.
  site_code = '{{ item.key }}',

  -- Prefixes used within the mesh. Both are required.
  prefix4 = '{{ item.value.prefix4 }}',
  prefix6 = '{{ item.value.prefix6 }}',

  -- Timezone of your community.
  -- See http://wiki.openwrt.org/doc/uci/system#time_zones
  timezone = 'CET-1CEST,M3.5.0,M10.5.0/3',

  -- List of NTP servers in your community.
  -- Must be reachable using IPv6!
  ntp_servers = {'ntp.ffnef.de',
                '1.freifunk.pool.ntp.org',
                '2.freifunk.pool.ntp.org',
                '3.freifunk.pool.ntp.org',
		'0.freifunk.pool.ntp.org'
  },

  -- Wireless regulatory domain of your community.
  regdom = 'DE',

  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    -- Wireless channel.
    channel = {{ item.value.channel24 }},

    -- ESSID used for client network.
    ap = {
      ssid = 'Freifunk-test',
      -- disabled = true, (optional)
    },

    ibss = {
      -- Adjust these values!
      ssid = '{{ item.key }}-mesh',
      mcast_rate = 6000,
      bssid = '{{ item.value.bssid }}',
      -- disabled = true, (optional)
    },
  },

  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel.
  wifi5 = {
    channel = {{ item.value.channel5 }},
    ap = {
      ssid = 'Freifunk-test',
    },
    ibss = {
      ssid = '{{ item.key }}-mesh',
      bssid = '{{ item.value.bssid }}',
      mcast_rate = 6000,
    },
  },

  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  next_node = {
    -- anycast IPs of all nodes
    ip4 = '{{ item.value.prefix4 | regex_replace('\.0/[0-9]+$',) }}.255',
    ip6 = '{{ item.value.prefix6 | regex_replace('::/[0-9]+$',) }}::ffff',

    -- anycast MAC of all nodes
    mac = '{{ item.value.next_mac }}',
  },

  -- Options specific to routing protocols (optional)
  -- mesh = {
    -- Options specific to the batman-adv routing protocol (optional)
    -- batman_adv = {
      -- Gateway selection class (optional)
      -- The default class 20 is based on the link quality (TQ) only,
      -- class 1 is calculated from both the TQ and the announced bandwidth
      -- gw_sel_class = 1,
    -- },
  -- },

  -- Refer to http://fastd.readthedocs.org/en/latest/ to better understand
  -- what these options do.
  fastd_mesh_vpn = {
    -- List of crypto-methods to use.
    methods = {'salsa2012+umac'},
    -- enabled = true,
    -- configurable = true,

    mtu = 1364,
    groups = {
      backbone = {
        limit = 1,

        -- List of peers.
        peers = {
--          peer1 = {
--            key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
--            -- This is a list, so you might add multiple entries.
--            -- You can also omit the ipv4 to allow both connection via ipv4 and ipv6
--            remotes = {'ipv4 "xxx.somehost.invalid" port xxxxxx'},
--          },
	  {% for peer in item.value.fastd %}
{{ peer | replace(".", "_") | replace("-", "_") }} = {
	    key = '{{ item.value.fastd[peer].key }}',
	    remotes = {'"{{ peer }}" port {{ item.value.fastd[peer].port }}'},
	  },
	  {% endfor %}
        },

        -- Optional: nested peer groups
        -- groups = {
        --   backbone_sub = {
        --     ...
        --   },
        --   ...
        -- },
      },
      -- Optional: additional peer groups, possibly with other limits
      -- backbone2 = {
      --   ...
      -- },
    },

    bandwidth_limit = {
      -- The bandwidth limit can be enabled by default here.
      enabled = false,

      -- Default upload limit (kbit/s).
      egress = 200,

      -- Default download limit (kbit/s).
      ingress = 3000,
    },
  },

  autoupdater = {
    -- Default branch. Don't forget to set GLUON_BRANCH when building!
    branch = 'stable',

    -- List of branches. You may define multiple branches.
    branches = {
      stable = {
        name = 'stable',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = { 'http://firmware.{{ item.key }}.ffnef.de/firmware/{{ item.key }}/stable/sysupgrade',
	    'http://firmware.{{ item.key }}.ffnef/firmware/{{ item.key }}/stable/sysupgrade',
	    'http://[{{ item.value.prefix6 | regex_replace('::/[0-9]+$',) }}:337::]/firmware/{{ item.key }}/stable/sysupgrade'
	},

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 2,

        -- List of public keys of maintainers.
        pubkeys = {
                'dd6a9d1aefc175f885705691498e904cbda12cc4602316f04816d78026c7c0f0', -- Benedikt Wi
		'fb919d4adc69bd404f5093ce6b43badf351f9e642ad458406be986baf6096247', -- PetaByteBoy
		'2a61930930a240c027f6ca4197203d400b6e4a32f9e92041e5f086907796c9bc', -- adorfer
        },
      },
    },
  },


  roguenets_filter = {
          allowed_prefix4 = '{{ item.value.prefix4 }}',
          allowed_prefix6 = '{{ item.value.prefix6 }}',
  },

  -- Node roles
  -- roles = {
  --   default = 'node',
  --   list = {
  --     'node',
  --     'test',
  --     'backbone',
  --     'service',
  --   },
  -- },

  -- Skip setup mode (config mode) on first boot
  -- setup_mode = {
  --  skip = true,
  -- },
}
